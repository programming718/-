/*3数中值分割法,选出枢纽元*/
void swap(int *a, int *b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}

int middle3(int a[], int left, int right)
{
    int center = (right + left)/2;
    if(a[left] > a[center])
        swap(&a[left], &a[center]);
    if(a[left] > a[right])
        swap(&a[left], &a[right]);
    if(a[center] > a[right])
        swap(&a[center], &a[right]);
    swap(&a[center], &a[right - 1]);
    return a[right -1];
}

/*直接插入排序*/
void insert(int a[], int n)
{
    int i, j, k;

    for (i = 1; i < n; i++)
    {
        //为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置
        for (j = i - 1; j >= 0; j--)
            if (a[j] < a[i])
                break;

        //如找到了一个合适的位置
        if (j != i - 1)
        {
            //将比a[i]大的数据向后移
            int temp = a[i];
            for (k = i - 1; k > j; k--)
                a[k + 1] = a[k];
            //将a[i]放到正确位置上
            a[k + 1] = temp;
        }
    }
}

/*线性选择*/
int select(int a[], int left, int right, int k)
{
    int privot,i,j,t;
    if(left == right)
        if(k == 0)
            return a[0];
        else
            return -1;
    if(right - left < 3)
    {
        insert(a, right-left+1);
    }
    else
    {
       privot = middle3(a, left, right);
       i = left;
       j = right - 1;
       for(;;)
       {
            while(a[++i] < privot);
            while(a[--j] > privot);
            if(i<j)
                swap(&a[i], &a[j]);
            else
                break;
       }
       swap(&a[i], &a[right -1]);
       //printf("%d ",i);
       //for(t = 0; t < 9; t++)
    //        printf("%d ", a[t]);
      // printf("\n");
       //printf("(%d %d)", k,i);
       if(k == i) return a[k];
       if(k < i) return select(a, left, i-1,k);
       if(k > i) return select(a, i+1, right,k);    
    }
    return a[k];
}

